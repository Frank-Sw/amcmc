// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// normal_prop
NumericVector normal_prop(const NumericVector& x, const NumericVector& lb, const NumericVector& ub, const NumericVector& scale, const LogicalVector& fixed);
RcppExport SEXP _amcmc_normal_prop(SEXP xSEXP, SEXP lbSEXP, SEXP ubSEXP, SEXP scaleSEXP, SEXP fixedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lb(lbSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type ub(ubSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type fixed(fixedSEXP);
    rcpp_result_gen = Rcpp::wrap(normal_prop(x, lb, ub, scale, fixed));
    return rcpp_result_gen;
END_RCPP
}
// MCMCcpp
NumericMatrix MCMCcpp(Function& fun, NumericVector theta0, int nbatch, const NumericVector& lb, const NumericVector& ub, const NumericVector& scale, const LogicalVector& fixed);
RcppExport SEXP _amcmc_MCMCcpp(SEXP funSEXP, SEXP theta0SEXP, SEXP nbatchSEXP, SEXP lbSEXP, SEXP ubSEXP, SEXP scaleSEXP, SEXP fixedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Function& >::type fun(funSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta0(theta0SEXP);
    Rcpp::traits::input_parameter< int >::type nbatch(nbatchSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lb(lbSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type ub(ubSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type fixed(fixedSEXP);
    rcpp_result_gen = Rcpp::wrap(MCMCcpp(fun, theta0, nbatch, lb, ub, scale, fixed));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_amcmc_normal_prop", (DL_FUNC) &_amcmc_normal_prop, 5},
    {"_amcmc_MCMCcpp", (DL_FUNC) &_amcmc_MCMCcpp, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_amcmc(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
